name: Enhanced Security CI/CD

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly comprehensive security scan

env:
  PYTHON_VERSION: '3.12'
  TERRAFORM_VERSION: '1.8.5'

jobs:
  python-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      # Multi-layered SAST scanning
      - name: Static Analysis with Ruff
        run: ruff check . --format=github

      - name: Code formatting check
        run: black --check .

      - name: Type checking with MyPy
        run: mypy src

      # Advanced security scanning
      - name: Bandit Security Scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-results.json || true

      - name: Safety Dependency Check
        run: |
          pip install safety
          safety check --json --output safety-results.json || true

      # Unit tests with coverage
      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  supply-chain-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Multi-engine vulnerability scanning
      - name: Comprehensive Vulnerability Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Dependency vulnerability scanning
      - name: Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      # SBOM Generation
      - name: Generate Software Bill of Materials
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      # License compliance
      - name: License Scan with FOSSA
        uses: fossa-contrib/fossa-action@v2
        if: ${{ secrets.FOSSA_API_KEY }}
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      # Container security (for Docker images if present)
      - name: Build test container
        run: |
          cat > Dockerfile.test << EOF
          FROM python:3.12-slim
          COPY requirements.txt .
          RUN pip install -r requirements.txt
          COPY src/ /app/src/
          WORKDIR /app
          EOF
          docker build -f Dockerfile.test -t mcspm-test:latest .

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mcspm-test:latest'
          format: 'sarif'
          output: 'container-scan-results.sarif'

  advanced-sast:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Semgrep SAST
      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/aws
            p/gcp
            p/docker
            p/terraform
            p/ci
          generateSarif: "1"

      # Additional security tools
      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  terraform-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -recursive -check

      # Terraform security scanning
      - name: TfSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/terraform
          soft_fail: false

      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      # Validate Terraform modules
      - name: Terraform Init and Validate (AWS)
        working-directory: infra/terraform/modules/aws
        run: |
          terraform init -backend=false
          terraform validate

      - name: Terraform Init and Validate (GCP)
        working-directory: infra/terraform/modules/gcp
        run: |
          terraform init -backend=false
          terraform validate

      # Plan validation (without applying)
      - name: Terraform Plan Validation (Staging)
        working-directory: infra/terraform/envs/staging
        run: |
          terraform init -backend=false
          terraform plan -var-file=example.tfvars.example || echo "Plan validation completed"

  provenance:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Generate provenance attestation
      - name: Generate SLSA Provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
        with:
          base64-subjects: "ZXhhbXBsZQ=="  # Base64 encoded artifact hash
          
      # Sign artifacts with Cosign
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign SBOM with Cosign
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # In production, sign the actual SBOM and artifacts
          cosign sign-blob --bundle cosign-bundle.json sbom.spdx.json || echo "Cosign signing skipped"

  security-gate:
    runs-on: ubuntu-latest
    needs: [python-security, supply-chain-security, advanced-sast, terraform-security]
    if: always()
    steps:
      - name: Security Gate Assessment
        run: |
          echo "=== Security Gate Assessment ==="
          echo "Python Security: ${{ needs.python-security.result }}"
          echo "Supply Chain Security: ${{ needs.supply-chain-security.result }}"
          echo "Advanced SAST: ${{ needs.advanced-sast.result }}"
          echo "Terraform Security: ${{ needs.terraform-security.result }}"
          
          # Fail if any critical security checks failed
          if [[ "${{ needs.python-security.result }}" == "failure" || \
                "${{ needs.supply-chain-security.result }}" == "failure" || \
                "${{ needs.advanced-sast.result }}" == "failure" || \
                "${{ needs.terraform-security.result }}" == "failure" ]]; then
            echo "❌ Security gate FAILED - Critical security issues detected"
            exit 1
          else
            echo "✅ Security gate PASSED - All security checks completed successfully"
          fi
